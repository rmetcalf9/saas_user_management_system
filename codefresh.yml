version: '1.0'
steps:

  #This file describes the deployment process for saas_user_management_system
  #If version is x.y.z (xy and z are numbers)
  # x is the major version

  #main_clone:#
  #  title: Cloning main repository...
  #  type: git-clone
  #  repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
  #  revision: '${{CF_REVISION}}'

  setup_variables:
    description: Sets variables for future steps
    image: alpine:latest
    working_directory: ${{main_clone}}
    commands:
      - export RJM_VERSION=$(cat ./VERSION)
      - export RJM_VERSION_UNDERSCORE=$(cat ./VERSION | tr '.' '_')
      - export RJM_MAJOR_VERSION=$(echo ${RJM_VERSION%%.*})
      - export RJM_WS_NAME=$(echo "saas_user_management")
      - export RJM_DOCKER_SERVICE_NAME=${RJM_WS_NAME}_${RJM_VERSION_UNDERSCORE}
      - export RJM_KONG_UPSTREAM_NAME=${RJM_WS_NAME}_${RJM_MAJOR_VERSION}
      - export JWT_COOKIE_NAME="jwt-auth-token"
      - export AUTHED_ACL_WHITELIST="saas_user_management"
      - export AUTHED_ACL_BLACKLIST=""
      - cf_export RJM_VERSION=${RJM_VERSION}
      - cf_export RJM_VERSION_UNDERSCORE=${RJM_VERSION_UNDERSCORE}
      - cf_export RJM_MAJOR_VERSION=${RJM_MAJOR_VERSION}
      - cf_export RJM_WS_NAME=${RJM_WS_NAME}
      - cf_export RJM_DOCKER_SERVICE_NAME=${RJM_DOCKER_SERVICE_NAME}
      - cf_export RJM_KONG_UPSTREAM_NAME=${RJM_KONG_UPSTREAM_NAME}
      - cf_export JWT_COOKIE_NAME="${JWT_COOKIE_NAME}"
      - cf_export AUTHED_ACL_WHITELIST="${AUTHED_ACL_WHITELIST}"
      - cf_export AUTHED_ACL_BLACKLIST="${AUTHED_ACL_BLACKLIST}"

  unit_test:
    description: Make sure all the unit tests pass
    image: metcarob/docker-ws-caller:0.5.3
    working_directory: ${{main_clone}}/services
    commands:
      - pip3 install --no-cache-dir -r ./src/requirements.txt
      - pip3 install --no-cache-dir -r ./testContainer/requirements.txt
      - export SKIPSQLALCHEMYTESTS=Y
      - nosetests --rednose ./test

  compile_frontend:
    description: Compile the frontend quasar application
    image: metcarob/docker-build-quasar-app:0.0.5
    working_directory: ${{main_clone}}
    commands:
      - build_quasar_app ./frontend

  compile_adminfrontend:
    description: Compile the adminfrontend quasar application
    image: metcarob/docker-build-quasar-app:0.0.5
    working_directory: ${{main_clone}}
    commands:
      - build_quasar_app ./adminfrontend

  build_the_image:
    working_directory: ${{main_clone}}
    type: build
    image_name: metcarob/saas_user_management_system
    tag: ${{RJM_VERSION}}

  build_the_test_image:
    working_directory: ${{main_clone}}/services/testContainer
    type: build
    image_name: metcarob/saas_user_management_system
    tag: develop
    dockerfile: ./Dockerfile

  container_level_tests:
    type: composition
    title: Container level tests
    composition:
      version: '2'
      services:
        saas_user_management_system:
          image: ${{build_the_image}}
          environment:
            - APIAPP_APIURL=http://saas_user_management_system:80/api
            - APIAPP_APIDOCSURL=http://saas_user_management_system:80/apidocs
            - APIAPP_FRONTENDURL=http://saas_user_management_system:80/frontend
            - APIAPP_MASTERPASSWORDFORPASSHASH=ABCCC
            - APIAPP_DEFAULTHOMEADMINUSERNAME=admin
            - APIAPP_DEFAULTHOMEADMINPASSWORD=admin
            - APIAPP_JWTSECRET="someDummy3245SecretForTesting"
    composition_candidates:
      saas_user_management_systemtest:
        image: ${{build_the_test_image}}
        command: /ext_volume/run_tests_with_wait.sh
        environment:
          - EXPECTED_CONTAINER_VERSION=${{RJM_VERSION}}
          - APIAPP_DEFAULTHOMEADMINUSERNAME=admin
          - APIAPP_DEFAULTHOMEADMINPASSWORD=admin

  push_to_dockerhub:
    type: push
    title: Push to Docker hub
    description: description
    candidate: ${{build_the_image}}
    tag: ${{RJM_VERSION}}
    image_name: metcarob/saas_user_management_system
    registry: dockerhub

  #Deploy new container to my website swarm
  deploy_to_metcarob_swarm:
      image: codefresh/remote-docker
      working_directory: ${{main_clone}}
      commands:
        - rdocker ${{RDOCKER_HOST}} docker service create --name ${{RJM_DOCKER_SERVICE_NAME}}
            --network main_net
            --secret saas_user_management_system_objectstore_config
            --secret saas_user_management_system_objectstore_hashpw
            --secret saas_user_management_system_objectstore_adminpw
            --secret saas_user_management_system_gateway_config
            --secret saas_jwtsecret
            --secret saas_user_management_system_authprov_google
            -e APIAPP_JWTSECRETFILE=/run/secrets/saas_jwtsecret
            -e APIAPP_GATEWAYINTERFACECONFIGFILE=/run/secrets/saas_user_management_system_gateway_config
            -e APIAPP_OBJECTSTORECONFIGFILE=/run/secrets/saas_user_management_system_objectstore_config
            -e APIAPP_MASTERPASSWORDFORPASSHASHFILE=/run/secrets/saas_user_management_system_objectstore_hashpw
            -e APIAPP_DEFAULTHOMEADMINPASSWORDFILE=/run/secrets/saas_user_management_system_objectstore_adminpw
            -e APIAPP_DEFAULTHOMEADMINUSERNAME=admin
            -e APIAPP_APIURL=https://api.metcarob.com/api
            -e APIAPP_APIDOCSURL=https://api.metcarob.com/saas_user_management/v${{RJM_MAJOR_VERSION}}/public/web/apidocs
            -e APIAPP_FRONTENDURL=https://api.metcarob.com/saas_user_management/v${{RJM_MAJOR_VERSION}}/public/web/frontend
            -e APIAPP_DEFAULTMASTERTENANTJWTCOLLECTIONALLOWEDORIGINFIELD="https://api.metcarob.com"
            -e APIAPP_OBJECTSTOREDETAILLOGGING="N"
            metcarob/saas_user_management_system:${{RJM_VERSION}}
      environment:
        - SSH_KEY=${{SSH_KEY_COMMAS}}
        - SSH_PORT=${{SSH_PORT}}
        - SPLIT_CHAR=${{SPLIT_CHAR}}

  # Connect test endpoint to new container
  ## This connects directly to the container - no upstreams in use for the test endpoint
  configure_kong_test_PUBLIC_endpoint_to_connect_to_container:
    image: codefresh/remote-docker
    working_directory: ${{main_clone}}
    commands:
      - rdocker ${{RDOCKER_HOST}} docker run --rm -it --network main_net --entrypoint kong_install_service_and_route
        metcarob/docker-ws-caller:0.5.3
        http://kong:8001
        ${{RJM_WS_NAME}}_v${{RJM_MAJOR_VERSION}}_TEST_PUBLIC http ${{RJM_DOCKER_SERVICE_NAME}} 80 /public/
        https api.metcarob.com /${{RJM_WS_NAME}}/test/v${{RJM_MAJOR_VERSION}}/public null null null true
    environment:
      - SSH_KEY=${{SSH_KEY_COMMAS}}
      - SSH_PORT=${{SSH_PORT}}
      - SPLIT_CHAR=${{SPLIT_CHAR}}

  configure_kong_test_AUTHED_endpoint_to_connect_to_container:
    image: codefresh/remote-docker
    working_directory: ${{main_clone}}
    commands:
      - rdocker ${{RDOCKER_HOST}} docker run --rm -it --network main_net --entrypoint kong_install_service_and_route
        metcarob/docker-ws-caller:0.5.3
        http://kong:8001
        ${{RJM_WS_NAME}}_v${{RJM_MAJOR_VERSION}}_TEST_AUTHED http ${{RJM_DOCKER_SERVICE_NAME}} 80 /authed/
        https api.metcarob.com /${{RJM_WS_NAME}}/test/v${{RJM_MAJOR_VERSION}}/authed null null null true
    environment:
      - SSH_KEY=${{SSH_KEY_COMMAS}}
      - SSH_PORT=${{SSH_PORT}}
      - SPLIT_CHAR=${{SPLIT_CHAR}}
    retry:
      maxAttempts: 3
      delay: 3
      exponentialFactor: 1

  #endpoints are secured the first time they are created. This will add the plugins only if they are not there
  secure_kong_test_AUTHED_endpoint_to_connect_to_container:
    image: codefresh/remote-docker
    working_directory: ${{main_clone}}
    commands:
      - rdocker ${{RDOCKER_HOST}} docker run --rm -it --network main_net --entrypoint kong_add_jwt_and_acl_plugins
        metcarob/docker-ws-caller:0.5.3
        http://kong:8001
        ${{RJM_WS_NAME}}_v${{RJM_MAJOR_VERSION}}_TEST_AUTHED
        \"${{JWT_COOKIE_NAME}}\"
        \"${{AUTHED_ACL_WHITELIST}}\"
        \"${{AUTHED_ACL_BLACKLIST}}\"
        \"kong_iss\"
    environment:
      - SSH_KEY=${{SSH_KEY_COMMAS}}
      - SSH_PORT=${{SSH_PORT}}
      - SPLIT_CHAR=${{SPLIT_CHAR}}
    retry:
      maxAttempts: 3
      delay: 3
      exponentialFactor: 1

  # Test test endpoint including version test
  ## This is tried a number of times with an increasing delay.
  ## This gives the docker service time to start and become healthy
  run_container_tests_against_test_endpoint:
    image: ${{build_the_test_image}}
    working_directory: ${{main_clone}}/server
    commands:
      - nosetests --rednose /ext_volume
    environment:
      - EXPECTED_CONTAINER_VERSION=${{RJM_VERSION}}
      - BASEURL_TO_TEST=https://api.metcarob.com/${{RJM_WS_NAME}}/test/v${{RJM_MAJOR_VERSION}}
      - HTTPORIGIN_TO_TEST=https://api.metcarob.com
      - RUNNINGVIAKONG="TRUE"
      - APIAPP_DEFAULTHOMEADMINUSERNAME=codefresh_test_user
      - APIAPP_DEFAULTHOMEADMINPASSWORD=${{CODEFRESH_TEST_USER_PASSWORD}}
    retry:
      maxAttempts: 3
      delay: 30
      exponentialFactor: 1

  #Deploys the prod kong endpoint
  ## the serivce target is not the container, instead it is the upstream
  ## this won't work until the upstream is in place
  configure_kong_prod_PUBLIC_endpoint:
    image: codefresh/remote-docker
    working_directory: ${{main_clone}}
    commands:
      - rdocker ${{RDOCKER_HOST}} docker run --rm -it --network main_net --entrypoint kong_install_service_and_route
        metcarob/docker-ws-caller:0.5.3
        http://kong:8001
        ${{RJM_WS_NAME}}_v${{RJM_MAJOR_VERSION}}_PUBLIC http ${{RJM_KONG_UPSTREAM_NAME}} 80 /public/
        https api.metcarob.com /${{RJM_WS_NAME}}/v${{RJM_MAJOR_VERSION}}/public null null null true
    environment:
      - SSH_KEY=${{SSH_KEY_COMMAS}}
      - SSH_PORT=${{SSH_PORT}}
      - SPLIT_CHAR=${{SPLIT_CHAR}}
    retry:
      maxAttempts: 3
      delay: 3
      exponentialFactor: 1

  configure_kong_prod_AUTHED_endpoint:
    image: codefresh/remote-docker
    working_directory: ${{main_clone}}
    commands:
      - rdocker ${{RDOCKER_HOST}} docker run --rm -it --network main_net --entrypoint kong_install_service_and_route
        metcarob/docker-ws-caller:0.5.3
        http://kong:8001
        ${{RJM_WS_NAME}}_v${{RJM_MAJOR_VERSION}}_AUTHED http ${{RJM_KONG_UPSTREAM_NAME}} 80 /authed/
        https api.metcarob.com /${{RJM_WS_NAME}}/v${{RJM_MAJOR_VERSION}}/authed null null null true
    environment:
      - SSH_KEY=${{SSH_KEY_COMMAS}}
      - SSH_PORT=${{SSH_PORT}}
      - SPLIT_CHAR=${{SPLIT_CHAR}}
    retry:
      maxAttempts: 3
      delay: 3
      exponentialFactor: 1

  #endpoints are secured the first time they are created. This will add the plugins only if they are not there
  secure_kong_prod_AUTHED_endpoint:
    image: codefresh/remote-docker
    working_directory: ${{main_clone}}
    commands:
      - rdocker ${{RDOCKER_HOST}} docker run --rm -it --network main_net --entrypoint kong_add_jwt_and_acl_plugins
        metcarob/docker-ws-caller:0.5.3
        http://kong:8001
        ${{RJM_WS_NAME}}_v${{RJM_MAJOR_VERSION}}_AUTHED
        \"${{JWT_COOKIE_NAME}}\"
        \"${{AUTHED_ACL_WHITELIST}}\"
        \"${{AUTHED_ACL_BLACKLIST}}\"
        \"kong_iss\"
    environment:
      - SSH_KEY=${{SSH_KEY_COMMAS}}
      - SSH_PORT=${{SSH_PORT}}
      - SPLIT_CHAR=${{SPLIT_CHAR}}
    retry:
      maxAttempts: 3
      delay: 3
      exponentialFactor: 1

  configure_kong_prod_upstream:
    image: codefresh/remote-docker
    working_directory: ${{main_clone}}
    commands:
      - rdocker ${{RDOCKER_HOST}} docker run --rm -it --network main_net --entrypoint kong_add_upstream
        metcarob/docker-ws-caller:0.5.3
        http://kong:8001
        ${{RJM_KONG_UPSTREAM_NAME}}
        ${{RJM_DOCKER_SERVICE_NAME}}:80
        remove_other_targets
    environment:
      - SSH_KEY=${{SSH_KEY_COMMAS}}
      - SSH_PORT=${{SSH_PORT}}
      - SPLIT_CHAR=${{SPLIT_CHAR}}
    retry:
      maxAttempts: 3
      delay: 3
      exponentialFactor: 1

# Possible future steps - test main endpoint and fail back if it is not working
