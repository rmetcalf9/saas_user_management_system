/* eslint-disable */
/**
 * THIS FILE IS GENERATED AUTOMATICALLY.
 * 1. DO NOT edit this file directly as it won't do anything.
 * 2. EDIT the original quasar.config file INSTEAD.
 * 3. DO NOT git commit this file. It should be ignored.
 *
 * This file is still here because there was an error in
 * the original quasar.config file and this allows you to
 * investigate the Node.js stack error.
 *
 * After you fix the original file, this file will be
 * deleted automatically.
 **/

var __getOwnPropNames = Object.getOwnPropertyNames;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// quasar.config.js
var require_quasar_config = __commonJS({
  "quasar.config.js"(exports, module) {
    var ESLintPlugin = __require("eslint-webpack-plugin");
    var { configure } = __require("quasar/wrappers");
    module.exports = configure(function(ctx) {
      return {
        // https://v2.quasar.dev/quasar-cli-webpack/supporting-ts
        supportTS: false,
        // https://v2.quasar.dev/quasar-cli-webpack/prefetch-feature
        // preFetch: true,
        // app boot file (/src/boot)
        // --> boot files are part of "main.js"
        // https://v2.quasar.dev/quasar-cli-webpack/boot-files
        boot: [
          "notify-defaults"
        ],
        // https://v2.quasar.dev/quasar-cli-webpack/quasar-config-js#Property%3A-css
        css: [
          "app.scss"
        ],
        // https://github.com/quasarframework/quasar/tree/dev/extras
        extras: [
          // 'ionicons-v4',
          // 'mdi-v5',
          // 'fontawesome-v6',
          // 'eva-icons',
          // 'themify',
          // 'line-awesome',
          // 'roboto-font-latin-ext', // this or either 'roboto-font', NEVER both!
          "roboto-font",
          // optional, you are not bound to it
          "material-icons"
          // optional, you are not bound to it
        ],
        // Full list of options: https://v2.quasar.dev/quasar-cli-webpack/quasar-config-js#Property%3A-build
        build: {
          vueRouterMode: "hash",
          // available values: 'hash', 'history'
          // transpile: false,
          // publicPath: '/',
          // Add dependencies for transpiling with Babel (Array of string/regex)
          // (from node_modules, which are by default not transpiled).
          // Applies only if "transpile" is set to true.
          // transpileDependencies: [],
          // rtl: true, // https://quasar.dev/options/rtl-support
          // preloadChunks: true,
          // showProgress: false,
          // gzip: true,
          // analyze: true,
          // Options below are automatically set depending on the env, set them if you want to override
          // extractCSS: false,
          // https://v2.quasar.dev/quasar-cli-webpack/handling-webpack
          // "chain" is a webpack-chain object https://github.com/neutrinojs/webpack-chain
          chainWebpack(chain) {
            chain.plugin("eslint-webpack-plugin").use(ESLintPlugin, [{ extensions: ["js", "vue"] }]);
          }
        },
        // Full list of options: https://v2.quasar.dev/quasar-cli-webpack/quasar-config-js#Property%3A-devServer
        devServer: {
          server: {
            type: "http"
          },
          port: 8080,
          open: true
          // opens browser window automatically
        },
        // https://v2.quasar.dev/quasar-cli-webpack/quasar-config-js#Property%3A-framework
        framework: {
          config: {},
          // iconSet: 'material-icons', // Quasar icon set
          // lang: 'en-US', // Quasar language pack
          // For special cases outside of where the auto-import strategy can have an impact
          // (like functional components as one of the examples),
          // you can manually specify Quasar components/directives to be available everywhere:
          //
          // components: [],
          // directives: [],
          // Quasar plugins
          plugins: [
            "Notify"
          ]
        },
        // animations: 'all', // --- includes all animations
        // https://quasar.dev/options/animations
        animations: [],
        // https://v2.quasar.dev/quasar-cli-webpack/developing-ssr/configuring-ssr
        ssr: {
          pwa: false,
          // manualStoreHydration: true,
          // manualPostHydrationTrigger: true,
          prodPort: 3e3,
          // The default port that the production server should use
          // (gets superseded if process.env.PORT is specified at runtime)
          maxAge: 1e3 * 60 * 60 * 24 * 30,
          // Tell browser when a file from the server should expire from cache (in ms)
          chainWebpackWebserver(chain) {
            chain.plugin("eslint-webpack-plugin").use(ESLintPlugin, [{ extensions: ["js"] }]);
          },
          middlewares: [
            ctx.prod ? "compression" : "",
            "render"
            // keep this as last one
          ]
        },
        // https://v2.quasar.dev/quasar-cli-webpack/developing-pwa/configuring-pwa
        pwa: {
          workboxPluginMode: "GenerateSW",
          // 'GenerateSW' or 'InjectManifest'
          workboxOptions: {},
          // only for GenerateSW
          // for the custom service worker ONLY (/src-pwa/custom-service-worker.[js|ts])
          // if using workbox in InjectManifest mode
          chainWebpackCustomSW(chain) {
            chain.plugin("eslint-webpack-plugin").use(ESLintPlugin, [{ extensions: ["js"] }]);
          },
          manifest: {
            name: "adminfrontend",
            short_name: "adminfrontend",
            description: "adminfrontend",
            display: "standalone",
            orientation: "portrait",
            background_color: "#ffffff",
            theme_color: "#027be3",
            icons: [
              {
                src: "icons/icon-128x128.png",
                sizes: "128x128",
                type: "image/png"
              },
              {
                src: "icons/icon-192x192.png",
                sizes: "192x192",
                type: "image/png"
              },
              {
                src: "icons/icon-256x256.png",
                sizes: "256x256",
                type: "image/png"
              },
              {
                src: "icons/icon-384x384.png",
                sizes: "384x384",
                type: "image/png"
              },
              {
                src: "icons/icon-512x512.png",
                sizes: "512x512",
                type: "image/png"
              }
            ]
          }
        },
        // Full list of options: https://v2.quasar.dev/quasar-cli-webpack/developing-cordova-apps/configuring-cordova
        cordova: {
          // noIosLegacyBuildFlag: true, // uncomment only if you know what you are doing
        },
        // Full list of options: https://v2.quasar.dev/quasar-cli-webpack/developing-capacitor-apps/configuring-capacitor
        capacitor: {
          hideSplashscreen: true
        },
        // Full list of options: https://v2.quasar.dev/quasar-cli-webpack/developing-electron-apps/configuring-electron
        electron: {
          bundler: "packager",
          // 'packager' or 'builder'
          packager: {
            // https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#options
            // OS X / Mac App Store
            // appBundleId: '',
            // appCategoryType: '',
            // osxSign: '',
            // protocol: 'myapp://path',
            // Windows only
            // win32metadata: { ... }
          },
          builder: {
            // https://www.electron.build/configuration/configuration
            appId: "adminfrontend"
          },
          // "chain" is a webpack-chain object https://github.com/neutrinojs/webpack-chain
          chainWebpackMain(chain) {
            chain.plugin("eslint-webpack-plugin").use(ESLintPlugin, [{ extensions: ["js"] }]);
          },
          chainWebpackPreload(chain) {
            chain.plugin("eslint-webpack-plugin").use(ESLintPlugin, [{ extensions: ["js"] }]);
          }
        }
      };
    });
  }
});
export default require_quasar_config();
